// Code generated by go generate; DO NOT EDIT.
// Code generated by go generate; DO NOT EDIT.
// Code generated by go generate; DO NOT EDIT.

package main

import (
	g "blue/api/go"
)

type CmdFunc func(*g.Client, []string) (string, error)

func Exec(conn *g.Client, s []string) (string, error) {
	if len(s) == 0 {
		return "", ErrCommand(s[0])
	}

	f, ok := funcMap[s[0]]
	if !ok {
		return "", ErrCommand(s[0])
	}
	return f(conn, s)
}

func Del() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Del(s[1])
	}
}

func Expire() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Expire(s[1],s[2])
	}
}

func Get() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Get(s[1])
	}
}

func Incr() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Incr(s[1])
	}
}

func Kvs() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 1 {
			return "", ErrArgu(s[0])
		}
		return conn.Kvs()
	}
}

func Len() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Len(s[1])
	}
}

func Lget() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Lget(s[1])
	}
}

func Llen() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Llen(s[1])
	}
}

func Lpop() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Lpop(s[1])
	}
}

func Lpush() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Lpush(s[1],s[2])
	}
}

func Lset() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Lset(s[1])
	}
}

func Nget() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Nget(s[1])
	}
}

func Nset() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Nset(s[1],s[2])
	}
}

func Rpop() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Rpop(s[1])
	}
}

func Rpush() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Rpush(s[1],s[2])
	}
}

func Select() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Select(s[1])
	}
}

func Set() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Set(s[1],s[2])
	}
}

func Version() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 1 {
			return "", ErrArgu(s[0])
		}
		return conn.Version()
	}
}

var funcMap = map[string]CmdFunc{
	"Del": Del(),
	"Expire": Expire(),
	"Get": Get(),
	"Incr": Incr(),
	"Kvs": Kvs(),
	"Len": Len(),
	"Lget": Lget(),
	"Llen": Llen(),
	"Lpop": Lpop(),
	"Lpush": Lpush(),
	"Lset": Lset(),
	"Nget": Nget(),
	"Nset": Nset(),
	"Rpop": Rpop(),
	"Rpush": Rpush(),
	"Select": Select(),
	"Set": Set(),
	"Version": Version(),
}
